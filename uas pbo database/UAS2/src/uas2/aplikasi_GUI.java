
package uas2;

import java.text.NumberFormat;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Date;
import java.sql.*;
import java.text.ParseException;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 0xr00t
 */
public class aplikasi_GUI extends javax.swing.JFrame {

    /**
     * Creates new form aplikasi_GUI
     */
    private DefaultTableModel tableModel;
    
    public aplikasi_GUI() {
        
        initComponents();
        
        initializeTable();
        setTitle("Kalkulator Pendapatan Restoran");
        
        load_table();
        kosongkan_form();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Hasil = new javax.swing.JLabel();
        Hasilpm = new javax.swing.JLabel();
        hasilCs = new javax.swing.JLabel();
        Nama_Restoran = new javax.swing.JTextField();
        HasilBruto = new javax.swing.JTextField();
        HasilListrikAir = new javax.swing.JTextField();
        HasilBahanBaku = new javax.swing.JTextField();
        HasilNet = new javax.swing.JTextField();
        HasilManager = new javax.swing.JTextField();
        HasilSewa = new javax.swing.JTextField();
        HasilPemilik = new javax.swing.JTextField();
        HasilCSR = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Bulan_Laporan = new com.toedter.calendar.JMonthChooser();
        Update_Data = new javax.swing.JButton();
        Cari = new javax.swing.JButton();
        Hapus_Data = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nama Restoran");

        jLabel2.setText("Bulan Laporan");

        jLabel3.setText("Pend. Bruto");

        jLabel4.setText("Peng Listrik/Air");

        jLabel5.setText("Peng Bahan Baku");

        jLabel6.setText("Pendapatan Net: ");

        jLabel7.setText("Manajer (30%):");

        Hasil.setText("Sewa (30%):");

        Hasilpm.setText("Pemilik (30%):");

        hasilCs.setText("CSR (10%):");

        Nama_Restoran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nama_RestoranActionPerformed(evt);
            }
        });

        HasilBruto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilBrutoActionPerformed(evt);
            }
        });

        HasilListrikAir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilListrikAirActionPerformed(evt);
            }
        });

        HasilBahanBaku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilBahanBakuActionPerformed(evt);
            }
        });

        HasilNet.setEditable(false);
        HasilNet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilNetActionPerformed(evt);
            }
        });

        HasilManager.setEditable(false);
        HasilManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilManagerActionPerformed(evt);
            }
        });

        HasilSewa.setEditable(false);
        HasilSewa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilSewaActionPerformed(evt);
            }
        });

        HasilPemilik.setEditable(false);
        HasilPemilik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilPemilikActionPerformed(evt);
            }
        });

        HasilCSR.setEditable(false);
        HasilCSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasilCSRActionPerformed(evt);
            }
        });

        jButton1.setText("Reset Form");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hitung Dan Tambahkan");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Update_Data.setText("Update");
        Update_Data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_DataActionPerformed(evt);
            }
        });

        Cari.setText("Cari");
        Cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariActionPerformed(evt);
            }
        });

        Hapus_Data.setText("Hapus");
        Hapus_Data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hapus_DataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hasil, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hasilpm, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hasilCs, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(Hapus_Data)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Cari)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Update_Data))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Nama_Restoran, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(HasilPemilik, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(HasilBruto, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(HasilListrikAir, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(HasilBahanBaku, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(HasilNet, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(HasilManager, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(HasilSewa, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(Bulan_Laporan, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(HasilCSR, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton2))))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Nama_Restoran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(Bulan_Laporan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(HasilBruto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(HasilListrikAir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(HasilBahanBaku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(HasilNet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(HasilManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hasil)
                    .addComponent(HasilSewa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hasilpm)
                    .addComponent(HasilPemilik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hasilCs)
                    .addComponent(HasilCSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Update_Data)
                    .addComponent(Cari)
                    .addComponent(Hapus_Data))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "no", "Restoran", "Bulan", "Bruto", "Listrik/Air", "Bahan Baku", "Net", "Manager", "Sewa", "Pemilik", "CSR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void kosongkan_form() {
        Nama_Restoran.setText("");
        Bulan_Laporan.setMonth(java.time.LocalDate.now().getMonthValue() - 1);
        HasilBruto.setText("");
        HasilListrikAir.setText("");
        HasilBahanBaku.setText("");
        
        HasilNet.setText("");
        HasilManager.setText("");
        HasilSewa.setText("");
        HasilPemilik.setText("");
        HasilCSR.setText("");
        
        // Allow editing of key fields when form is clear
        Nama_Restoran.setEditable(true);
        Bulan_Laporan.setEnabled(true);
        
        Nama_Restoran.requestFocus();
    }
    private void load_table() {
        tableModel.setRowCount(0); // Clear existing table data
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));

        try {
            String sql = "SELECT * FROM pend_resto"; // Use the table name from your image
            Connection conn = koneksiDatabase.getKoneksi();
            Statement stm = conn.createStatement();
            ResultSet res = stm.executeQuery(sql);
               
            while (res.next()) {
                tableModel.addRow(new Object[]{
                    res.getString("nama_restoran"),
                    res.getString("bulan_laporan"),
                    currencyFormat.format(res.getDouble("pend_bruto")),
                    currencyFormat.format(res.getDouble("ListrikAir")),
                    currencyFormat.format(res.getDouble("BahanBaku")),
                    currencyFormat.format(res.getDouble("pend_net")),
                    currencyFormat.format(res.getDouble("manager")),
                    currencyFormat.format(res.getDouble("sewa")),
                    currencyFormat.format(res.getDouble("pemilik")),
                    currencyFormat.format(res.getDouble("CSR"))
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data dari database: " + e.getMessage());
        }
    }
    
    
    private void Nama_RestoranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nama_RestoranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Nama_RestoranActionPerformed

    private boolean validateInput() {
        if (Nama_Restoran.getText().trim().isEmpty() || HasilBruto.getText().trim().isEmpty() || HasilListrikAir.getText().trim().isEmpty() || HasilBahanBaku.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom input (Nama, Bruto, Listrik/Air, Bahan Baku) harus diisi!", "Error Input", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            Double.parseDouble(HasilBruto.getText());
            Double.parseDouble(HasilListrikAir.getText());
            Double.parseDouble(HasilBahanBaku.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Input Pendapatan dan Pengeluaran harus berupa angka.", "Error Input", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    
    private void initializeTable() {
        // Mendefinisikan kolom untuk tabel
        String[] columnNames = {
            "Restoran", "Bulan", "Bruto", "Listrik/Air", "Bahan Baku", 
            "Net", "Manager", "Sewa", "Pemilik", "CSR"
        };
        // Membuat table model yang dinamis (bisa ditambah/hapus baris)
        tableModel = new DefaultTableModel(columnNames, 0);
        jTable1.setModel(tableModel);
    }
    
    private void HasilBrutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilBrutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilBrutoActionPerformed

    private void HasilListrikAirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilListrikAirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilListrikAirActionPerformed

    private void HasilBahanBakuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilBahanBakuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilBahanBakuActionPerformed

    private void HasilNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilNetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilNetActionPerformed

    private void HasilManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilManagerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilManagerActionPerformed

    private void HasilSewaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilSewaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilSewaActionPerformed

    private void HasilPemilikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilPemilikActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilPemilikActionPerformed

    private void HasilCSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasilCSRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HasilCSRActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));

        if (!validateInput()) return;

        try {
            // 1. Get data and create Restaurant object
            int bulanDipilih = Bulan_Laporan.getMonth() + 1;
            String bulan = Month.of(bulanDipilih).getDisplayName(TextStyle.FULL, new Locale("id", "ID"));
            
            Restaurant resto = new Restaurant(
                Nama_Restoran.getText(),
                bulan,
                Double.parseDouble(HasilBruto.getText()),
                Double.parseDouble(HasilListrikAir.getText()),
                Double.parseDouble(HasilBahanBaku.getText())
            );

            // 2. Display calculated results
            HasilNet.setText(currencyFormat.format(resto.getPendNet()));
            HasilManager.setText(currencyFormat.format((long) resto.getManager()));
            HasilSewa.setText(currencyFormat.format(resto.getSewa()));
            HasilPemilik.setText(currencyFormat.format(resto.getOwner()));
            HasilCSR.setText(currencyFormat.format(resto.getCsr()));

            // 3. Save to database
            String sql = "INSERT INTO pend_resto (nama_restoran, bulan_laporan, pend_bruto, ListrikAir, BahanBaku, pend_net, manager, sewa, pemilik, CSR) VALUES (?,?,?,?,?,?,?,?,?,?)";
            Connection conn = koneksiDatabase.getKoneksi();
            PreparedStatement pstm = conn.prepareStatement(sql);
            
            pstm.setString(1, resto.getNama());
            pstm.setString(2, resto.getBulan());
            pstm.setDouble(3, resto.getPendBruto());
            pstm.setDouble(4, resto.getPengListAir());
            pstm.setDouble(5, resto.getPengBahan());
            pstm.setDouble(6, resto.getPendNet());
            pstm.setDouble(7, resto.getManager());
            pstm.setDouble(8, resto.getSewa());
            pstm.setDouble(9, resto.getOwner());
            pstm.setDouble(10, resto.getCsr());

            pstm.execute();
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan ke database.");

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
             JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // 4. Refresh table and clear form
        load_table();
        kosongkan_form();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        kosongkan_form();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Update_DataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_DataActionPerformed
        // TODO add your handling code here:
        
        if (!validateInput()) return;
        
        try {
            // Recalculate based on potentially edited values
            int bulanDipilih = Bulan_Laporan.getMonth() + 1;
            String bulan = Month.of(bulanDipilih).getDisplayName(TextStyle.FULL, new Locale("id", "ID"));
            Restaurant resto = new Restaurant(
                Nama_Restoran.getText(), bulan,
                Double.parseDouble(HasilBruto.getText()),
                Double.parseDouble(HasilListrikAir.getText()),
                Double.parseDouble(HasilBahanBaku.getText())
            );

            String sql = "UPDATE pend_resto SET pend_bruto=?, ListrikAir=?, BahanBaku=?, pend_net=?, manager=?, sewa=?, pemilik=?, CSR=? WHERE nama_restoran=? AND bulan_laporan=?";
            Connection conn = (Connection) koneksiDatabase.getKoneksi();
            PreparedStatement pstm = conn.prepareStatement(sql);

            pstm.setDouble(1, resto.getPendBruto());
            pstm.setDouble(2, resto.getPengListAir());
            pstm.setDouble(3, resto.getPengBahan());
            pstm.setDouble(4, resto.getPendNet());
            pstm.setDouble(5, resto.getManager());
            pstm.setDouble(6, resto.getSewa());
            pstm.setDouble(7, resto.getOwner());
            pstm.setDouble(8, resto.getCsr());
            pstm.setString(9, resto.getNama()); // Key for WHERE clause
            pstm.setString(10, resto.getBulan()); // Key for WHERE clause

            int rowsAffected = pstm.executeUpdate();
            if (rowsAffected > 0) {
                 JOptionPane.showMessageDialog(null, "Data berhasil diupdate.");
            } else {
                 JOptionPane.showMessageDialog(null, "Gagal mengupdate. Data tidak ditemukan.");
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengupdate data: " + e.getMessage());
        }
        
        load_table();
        kosongkan_form();
        
    }//GEN-LAST:event_Update_DataActionPerformed

    private void CariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariActionPerformed
        // TODO add your handling code here:
        try {
            String namaCari = JOptionPane.showInputDialog(this, "Masukkan Nama Restoran untuk dicari:");
            if (namaCari == null || namaCari.trim().isEmpty()) return;

            String sql = "SELECT * FROM pend_resto WHERE nama_restoran = ?";
            Connection conn = koneksiDatabase.getKoneksi();
            PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.setString(1, namaCari.trim());
            
            ResultSet rs = pstm.executeQuery();
            
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));

            if (rs.next()) {
                // Populate form with found data
                Nama_Restoran.setText(rs.getString("nama_restoran"));
                
                // Find month index and set it
                String bulanDb = rs.getString("bulan_laporan");
                for (int i = 0; i < 12; i++) {
                    String bulanLoop = Month.of(i + 1).getDisplayName(TextStyle.FULL, new Locale("id", "ID"));
                    if (bulanLoop.equalsIgnoreCase(bulanDb)) {
                        Bulan_Laporan.setMonth(i);
                        break;
                    }
                }

                HasilBruto.setText(String.valueOf(rs.getDouble("pend_bruto")));
                HasilListrikAir.setText(String.valueOf(rs.getDouble("ListrikAir")));
                HasilBahanBaku.setText(String.valueOf(rs.getDouble("BahanBaku")));
                
                HasilNet.setText(currencyFormat.format(rs.getDouble("pend_net")));
                HasilManager.setText(currencyFormat.format(rs.getDouble("manager")));
                HasilSewa.setText(currencyFormat.format(rs.getDouble("sewa")));
                HasilPemilik.setText(currencyFormat.format(rs.getDouble("pemilik")));
                HasilCSR.setText(currencyFormat.format(rs.getDouble("CSR")));
                
                // Lock key fields after successful search to prevent accidental changes to the key
                Nama_Restoran.setEditable(false);
                Bulan_Laporan.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Data ditemukan.");

            } else {
                JOptionPane.showMessageDialog(null, "Data dengan nama '" + namaCari + "' tidak ditemukan.");
                kosongkan_form();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat mencari data: " + e.getMessage());
        }
        
    }//GEN-LAST:event_CariActionPerformed

    private void Hapus_DataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hapus_DataActionPerformed
        // TODO add your handling code here:
        if (Nama_Restoran.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pilih data dari tabel atau cari data terlebih dahulu untuk menghapus!");
            return;
        }
        
        try {
            int confirmation = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
            
            if(confirmation == JOptionPane.YES_OPTION){
                String sql = "DELETE FROM pend_resto WHERE nama_restoran=? AND bulan_laporan=?";
                Connection conn = (Connection) koneksiDatabase.getKoneksi();
                PreparedStatement pstm = conn.prepareStatement(sql);

                String bulan = Month.of(Bulan_Laporan.getMonth() + 1).getDisplayName(TextStyle.FULL, new Locale("id", "ID"));
                pstm.setString(1, Nama_Restoran.getText());
                pstm.setString(2, bulan);

                int rowsAffected = pstm.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Data berhasil dihapus.");
                } else {
                    JOptionPane.showMessageDialog(null, "Gagal menghapus. Data tidak ditemukan.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + e.getMessage());
        }
        load_table();
        kosongkan_form();
        
    }//GEN-LAST:event_Hapus_DataActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int baris = jTable1.rowAtPoint(evt.getPoint());

        Nama_Restoran.setText(jTable1.getValueAt(baris, 0).toString());
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));

        String bulanTabel = jTable1.getValueAt(baris, 1).toString();
        for (int i = 0; i < 12; i++) {
             String bulanLoop = Month.of(i + 1).getDisplayName(TextStyle.FULL, new Locale("id", "ID"));
             if (bulanLoop.equalsIgnoreCase(bulanTabel)) {
                 Bulan_Laporan.setMonth(i);
                 break;
             }
        }

        try {
            // Parse currency string back to number for input fields
            HasilBruto.setText(String.valueOf(currencyFormat.parse(jTable1.getValueAt(baris, 2).toString()).doubleValue()));
            HasilListrikAir.setText(String.valueOf(currencyFormat.parse(jTable1.getValueAt(baris, 3).toString()).doubleValue()));
            HasilBahanBaku.setText(String.valueOf(currencyFormat.parse(jTable1.getValueAt(baris, 4).toString()).doubleValue()));

            // Set formatted values for result fields
            HasilNet.setText(jTable1.getValueAt(baris, 5).toString());
            HasilManager.setText(jTable1.getValueAt(baris, 6).toString());
            HasilSewa.setText(jTable1.getValueAt(baris, 7).toString());
            HasilPemilik.setText(jTable1.getValueAt(baris, 8).toString());
            HasilCSR.setText(jTable1.getValueAt(baris, 9).toString());
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Gagal membaca data dari tabel: " + e.getMessage());
        }
        
        // Lock key fields after selection to prevent accidental changes
        Nama_Restoran.setEditable(false);
        Bulan_Laporan.setEnabled(false);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aplikasi_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aplikasi_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aplikasi_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aplikasi_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new aplikasi_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JMonthChooser Bulan_Laporan;
    private javax.swing.JButton Cari;
    private javax.swing.JButton Hapus_Data;
    private javax.swing.JLabel Hasil;
    private javax.swing.JTextField HasilBahanBaku;
    private javax.swing.JTextField HasilBruto;
    private javax.swing.JTextField HasilCSR;
    private javax.swing.JTextField HasilListrikAir;
    private javax.swing.JTextField HasilManager;
    private javax.swing.JTextField HasilNet;
    private javax.swing.JTextField HasilPemilik;
    private javax.swing.JTextField HasilSewa;
    private javax.swing.JLabel Hasilpm;
    private javax.swing.JTextField Nama_Restoran;
    private javax.swing.JButton Update_Data;
    private javax.swing.JLabel hasilCs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
